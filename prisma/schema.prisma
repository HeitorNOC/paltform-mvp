generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String                 @default("USER")
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  timeIntervals         UserTimeInterval[]
  schedulings           Scheduling[]
  carts                 Cart[]
  UserRepository        UserRepository[]

  @@index([role])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model UserTimeInterval {
  id                    String @id @default(uuid())
  week_day              Int
  time_start_in_minutes Int
  time_end_in_minutes   Int
  user                  User   @relation(fields: [user_id], references: [id])
  user_id               String

  @@index([user_id])
  @@map("user_time_intervals")
}

model Scheduling {
  id             String   @id @default(uuid())
  date           DateTime
  name           String
  email          String
  observations   String?
  created_at     DateTime @default(now())
  user           User     @relation(fields: [user_id], references: [id])
  user_id        String
  user_phone     String?
  payment_method String   @default("cash")
  payment_status String   @default("pending")
  cartId         String?
  cart           Cart?    @relation(fields: [cartId], references: [id])

  @@index([user_id])
  @@map("schedulings")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  image_url   String
  price       Decimal
  type        String
  CartItem    CartItem[]

  @@map("products")
}

model Cart {
  id          String       @id @default(uuid())
  user_id     String
  total_price Decimal
  user        User         @relation(fields: [user_id], references: [id])
  items       CartItem[]
  Scheduling  Scheduling[]

  @@index([user_id])
  @@map("carts")
}

model CartItem {
  id         String  @id @default(uuid())
  cart_id    String
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  quantity   Int     @default(1)

  @@index([cart_id])
  @@index([product_id])
  @@map("cart_items")
}

model UserRepository {
  id          String @id @default(uuid())
  description String
  name        String
  image_url   String
  user        User   @relation(fields: [user_id], references: [id])
  user_id     String
}
